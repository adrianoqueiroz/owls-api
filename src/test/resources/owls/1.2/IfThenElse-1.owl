<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE uridef[
  <!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns">
  <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema">
  <!ENTITY owl "http://www.w3.org/2002/07/owl">
  <!ENTITY xsd "http://www.w3.org/2001/XMLSchema">
  <!ENTITY service "http://localhost:8888/owl_s/1.2/Service.owl">
  <!ENTITY profile "http://localhost:8888/owl_s/1.2/Profile.owl">
  <!ENTITY process "http://localhost:8888/owl_s/1.2/Process.owl">
  <!ENTITY grounding "http://localhost:8888/owl_s/1.2/Grounding.owl">
  <!ENTITY expr "http://localhost:8888/owl_s/1.2/generic/Expression.owl">
  <!ENTITY swrl "http://www.w3.org/2003/11/swrl">
  <!ENTITY swrlb "http://www.w3.org/2003/11/swrlb">
  <!ENTITY list "http://localhost:8888/owl_s/1.2/generic/ObjectList.owl">
  <!ENTITY this "http://on.cs.unibas.ch/owl-s/1.2/IfThenElse-1.owl">
]>

<rdf:RDF
  xmlns="&this;#"
  xmlns:rdf="&rdf;#"
  xmlns:rdfs="&rdfs;#"
  xmlns:owl="&owl;#"
  xmlns:xsd="&xsd;#"
  xmlns:service="&service;#"
  xmlns:profile="&profile;#"
  xmlns:process="&process;#"
  xmlns:grounding="&grounding;#"
  xmlns:expr="&expr;#"
  xmlns:swrl="&swrl;#"
  xmlns:list="&list;#"
  xml:base="&this;">

<owl:Ontology rdf:about="">
	<owl:imports rdf:resource="&service;"/>
	<owl:imports rdf:resource="&process;"/>
	<owl:imports rdf:resource="&profile;"/>
	<owl:versionInfo>$Id: IfThenElse-1.owl 2398 2010-01-27 15:05:12Z thorsten $</owl:versionInfo>
</owl:Ontology>

<!-- Service description -->
<service:Service rdf:ID="IfThenElseService">
	<service:presents rdf:resource="#IfThenElseProfile"/>
	<service:describedBy rdf:resource="#IfThenElseProcess"/>
</service:Service>

<!-- Profile description -->
<profile:Profile rdf:ID="IfThenElseProfile">
	<service:presentedBy rdf:resource="#IfThenElseService"/>
	<profile:serviceName xml:lang="en">
		Simple If-Then-Else Test Service using a SWRL built-in rule (lessThan).
	</profile:serviceName>
	<profile:hasInput rdf:resource="#inputNumber1"/>
	<profile:hasInput rdf:resource="#inputNumber2"/>
	<profile:hasOutput rdf:resource="#outputNumber"/>
</profile:Profile>

<!-- Composite Process description -->
<process:CompositeProcess rdf:ID="IfThenElseProcess">
	<service:describes rdf:resource="#IfThenElseService"/>

	<process:hasInput>
		<process:Input rdf:ID="inputNumber1">
			<process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#float</process:parameterType>
			<rdfs:label>inputNumber1</rdfs:label>
		</process:Input>
	</process:hasInput>

	<process:hasInput>
		<process:Input rdf:ID="inputNumber2">
			<process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#float</process:parameterType>
			<rdfs:label>inputNumber2</rdfs:label>
		</process:Input>
	</process:hasInput>

	<process:hasOutput>
		<process:Output rdf:ID="outputNumber">
			<process:parameterType rdf:datatype="&xsd;#anyURI">&xsd;#string</process:parameterType>
			<rdfs:label>outputNumber</rdfs:label>
		</process:Output>
	</process:hasOutput>

	<process:composedOf>
		<process:If-Then-Else rdf:ID="If-Then-Else">
			<process:ifCondition>
				<expr:SWRL-Condition>
					<expr:expressionObject>
						<swrl:AtomList>
							<rdf:first>
								<swrl:BuiltinAtom>
									<swrl:builtin rdf:resource="&swrlb;#lessThan" />
									<swrl:arguments>
										<!-- Test using relative URIs within literal. Parser should handle this correctly. -->
										<rdf:List>
											<rdf:first rdf:resource="#inputNumber1" />
											<rdf:rest>
												<rdf:List>
													<rdf:first rdf:resource="#inputNumber2" />
													<rdf:rest rdf:resource="&rdf;#nil" />
												</rdf:List>
											</rdf:rest>
										</rdf:List>
									</swrl:arguments>
								</swrl:BuiltinAtom>
							</rdf:first>
							<rdf:rest rdf:resource="&rdf;#nil" />
						</swrl:AtomList>
					</expr:expressionObject>
				</expr:SWRL-Condition>
			</process:ifCondition>
			<process:then>
				<process:Sequence>
					<process:components>
						<process:ControlConstructList>
							<list:first rdf:resource="#ProduceThen" />
							<list:rest rdf:resource="&list;#nil" />
						</process:ControlConstructList>
					</process:components>
				</process:Sequence>
			</process:then>
			<process:else>
				<process:Sequence>
					<process:components>
						<process:ControlConstructList>
							<list:first rdf:resource="#ProduceElse" />
							<list:rest rdf:resource="&list;#nil" />
						</process:ControlConstructList>
					</process:components>
				</process:Sequence>
			</process:else>
		</process:If-Then-Else>
	</process:composedOf>
</process:CompositeProcess>

<process:Produce rdf:ID="ProduceThen">
	<process:producedBinding>
		<process:OutputBinding>
			<process:toVar rdf:resource="#outputNumber" />
			<process:valueSource>
				<process:ValueOf>
					<process:fromProcess rdf:resource="&process;#ThisPerform" />
					<process:theVar rdf:resource="#inputNumber1"/>
				</process:ValueOf>
			</process:valueSource>
		</process:OutputBinding>
	</process:producedBinding>
</process:Produce>

<process:Produce rdf:ID="ProduceElse">
	<process:producedBinding>
		<process:OutputBinding>
			<process:toVar rdf:resource="#outputNumber" />
			<process:valueSource>
				<process:ValueOf>
					<process:fromProcess rdf:resource="&process;#ThisPerform" />
					<process:theVar rdf:resource="#inputNumber2" />
				</process:ValueOf>
			</process:valueSource>
		</process:OutputBinding>
	</process:producedBinding>
</process:Produce>

</rdf:RDF>